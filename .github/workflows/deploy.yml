name: Deploy OpenWrite

on:
  push:
    branches: [main]
  workflow_dispatch:
  # Only deploy after CI passes
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Server & Docs
    environment: production
    # Only run if CI workflow succeeded or if manually triggered/pushed to main
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: bun install

      - name: Type check all packages
        run: bun run check-types

      - name: Build all packages with Turborepo
        run: bun run build

      - name: Deploy Server to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: "./apps/server"
          command: deploy
          secrets: |
            BETTER_AUTH_SECRET
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}

      - name: Debug - List files in server directory
        run: |
          echo "=== Files in apps/server directory ==="
          ls -la apps/server/
          echo ""
          echo "=== Contents of wrangler.jsonc ==="
          cat apps/server/wrangler.jsonc
          echo ""
          echo "=== Migration files ==="
          ls -la apps/server/src/db/migrations/ || echo "No migrations directory found"

      - name: Debug - Test wrangler auth
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: "./apps/server"
          command: whoami

      - name: Debug - Check wrangler version and config
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: "./apps/server"
          command: --version

      - name: Check Migration Status
        continue-on-error: true
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: "./apps/server"
          command: d1 migrations list DB --remote

      - name: Run Database Migrations
        continue-on-error: true
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: "./apps/server"
          command: d1 migrations apply DB --remote

      - name: Deploy Documentation
        continue-on-error: true
        run: bun run docs:deploy || echo "Documentation deployment not configured"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Print Deployment URL
        run: |
          echo "ðŸš€ Server deployed to: https://openwrite.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev"
          echo "ðŸ“± Includes both API and web app in a single Worker"
          echo "ðŸ“š Documentation deployment attempted"
          echo "ðŸŽ¯ Built with Turborepo for optimized caching and performance"